---

- name: set api feature facts
  set_fact:
    icinga2_cert_name: "{{ icinga2_dict_features.api.cert_name |default(ansible_fqdn) }}"
    icinga2_ca_host: "{{ icinga2_dict_features.api.ca_host | default(omit) }}"
    icinga2_ca_host_port: "{{ icinga2_dict_features.api.ca_host_port | default(omit) }}"
    icinga2_ca_fingerprint: "{{ icinga2_dict_features.api.ca_fingerprint | default(omit) }}"
    icinga2_force_newcert: "{{ icinga2_dict_features.api.force_newcert |default(False) }}"
    icinga2_endpoints: "{{ icinga2_dict_features.api.endpoints |default([]) }}"
    icinga2_zones: "{{ icinga2_dict_features.api.zones |default([]) }}"
    icinga2_ssl_cert: "{{ icinga2_dict_features.api.ssl_cert | default(omit) }}"
    icinga2_ssl_cacert: "{{ icinga2_dict_features.api.ssl_cacert | default(omit) }}"
    icinga2_ssl_key: "{{ icinga2_dict_features.api.ssl_key | default(omit) }}"

- assert:
    that: ((icinga2_ssl_cacert is defined and icinga2_ssl_cert is defined and icinga2_ssl_key is defined) or (icinga2_ssl_cacert is undefined and icinga2_ssl_cert is undefined and icinga2_ssl_key is undefined and icinga2_ca_host is defined))
    fail_msg: ca_host is mandatory or ssl_cacert/cert/key have to be set at the same time
    success_msg: API Feature is configured correctly

- name: api feature cleanup arguments list
  set_fact:
    args: "{{ args|default({}) | combine({idx.key: idx.value}) }}"
  when: idx.key not in ['ca_host', 'icinga2_ca_host_port', 'cert_name', 'ca_fingerprint', 'force_newcert', 'zones', 'endpoints', 'ssl_cacert', 'ssl_key', 'ssl_cert' ]
  loop: "{{ icinga2_dict_features.api |dict2items }}"
  loop_control:
    loop_var: idx

- name: feature api ApiListener object
  icinga2_object:
    name: api
    type: ApiListener
    file: features-available/api.conf
    args: "{{ args }}"
  register: result

- set_fact:
    icinga2_local_objects: "{{ icinga2_local_objects|default([]) + [result.dest] }}"

- name: feature api Endpoint objects
  icinga2_object:
    type: Endpoint
    args: "{{ idx }}"
  loop: "{{ icinga2_endpoints }}"
  loop_control:
    loop_var: idx
  register: result

- set_fact:
    icinga2_local_objects: "{{ icinga2_local_objects|default([]) + [idx.dest] }}"
  loop: "{{ result.results }}"
  loop_control:
    loop_var: idx

- name: feature api Zone objects
  icinga2_object:
    type: Zone
    args: "{{ idx }}"
  loop: "{{ icinga2_zones }}"
  loop_control:
    loop_var: idx
  register: result

- set_fact:
    icinga2_local_objects: "{{ icinga2_local_objects|default([]) + [idx.dest] }}"
  loop: "{{ result.results }}"
  loop_control:
    loop_var: idx

- name: create new CA
  block:
    - name: check ca key already exits
      stat:
        path: "{{ icinga2_ca_path }}/ca.key"
      register: icinga2_ca_key_path

    - name: check ca cert already exits
      stat:
        path: "{{ icinga2_ca_path }}/ca.crt"
      register: icinga2_ca_cert_path

    - name: create CA
      shell: >
        icinga2 pki new-ca
      when: icinga2_ca_cert_path.stat.exists == false and icinga2_ca_key_path.stat.exists == false
  when: icinga2_ca_host is defined and icinga2_ca_host == 'none'

- name: check cert key already exits
  stat:
    path: "{{ icinga2_cert_path }}/{{ icinga2_cert_name }}.key"
  register: icinga2_ssl_key_path

- name: check certificate already exits
  stat:
    path: "{{ icinga2_cert_path }}/{{ icinga2_cert_name }}.crt"
  register: icinga2_ssl_cert_path

- name: certificate request
  when: (icinga2_ssl_cert_path.stat.exists == false or icinga2_ssl_key_path.stat.exists == false or icinga2_force_newcert) and icinga2_ssl_cacert is not defined
  block:
    - name: create cert path
      file:
        path: "{{ icinga2_cert_path }}"
        state: directory
        owner: "{{ icinga2_user }}"
        group: "{{ icinga2_group }}"
        mode: "0750"

    - name: save trusted-master.crt
      shell: >-
        icinga2 pki save-cert
        --host "{{ icinga2_ca_host }}"
        --port "{{ icinga2_ca_host_port | default('5665') }}"
        --trustedcert "{{ icinga2_cert_path }}/trusted-master.crt"
      when: icinga2_ca_host != 'none'
      register: _trusted_master_cert

    - name: normalize ca fingerprint
      set_fact:
        _ca_fingerprint_normalized: "{{ icinga2_ca_fingerprint | upper | replace(':', ' ') }}"
      when: icinga2_ca_fingerprint is defined

    - name: validate ca certificate fingerprint
      fail:
        msg: "CA certificate identity not verified. Fingerprint did not match."
      when:
        - icinga2_ca_fingerprint is defined
        - _trusted_master_cert.stdout | regex_search(_ca_fingerprint_normalized, multiline=True) is none

    - name: generate private and public key
      shell: >-
        icinga2 pki new-cert
        --cn "{{ icinga2_cert_name }}"
        --key "{{ icinga2_cert_path }}/{{ icinga2_cert_name }}.key"
        {% if icinga2_ca_host != 'none' %} --cert "{{ icinga2_cert_path }}/{{ icinga2_cert_name }}.crt" {% else %} --csr "{{ icinga2_cert_path }}/{{ icinga2_cert_name }}.csr" {%- endif %}

    - name: delegate ticket request to master
      shell: icinga2 pki ticket --cn "{{ icinga2_cert_name }}"
      delegate_to: "{{ icinga2_delegate_host | default('icinga2_ca_host') }}"
      register: icinga2_ticket
      when: icinga2_ca_host != 'none'

    - name: get certificate
      shell: >-
        icinga2 pki {% if icinga2_ca_host != 'none' %} request
        --ticket "{{ icinga2_ticket.stdout }}"
        --host "{{ icinga2_ca_host }}"
        --port "{{ icinga2_ca_host_port | default('5665') }}"
        --ca "{{ icinga2_cert_path }}/ca.crt"
        --key "{{ icinga2_cert_path }}/{{ icinga2_cert_name }}.key"
        --trustedcert "{{ icinga2_cert_path }}/trusted-master.crt"
        {% else %} sign-csr --csr "{{ icinga2_cert_path }}/{{ icinga2_cert_name }}.csr" {%- endif %}
        --cert "{{ icinga2_cert_path }}/{{ icinga2_cert_name }}.crt"
      notify: reload icinga2 service

    - name: copy CA root certificate
      copy:
        src: "{{ icinga2_ca_path }}/ca.crt"
        dest: "{{ icinga2_cert_path }}/ca.crt"
        owner: "{{ icinga2_user }}"
        group: "{{ icinga2_group }}"
        remote_src: yes
      when: icinga2_ca_host == 'none'

- name: use self provided certificates
  block:
    - set_fact:
        _tmp_crt:
          - src: "{{ icinga2_ssl_cacert }}"
            dest: "{{ icinga2_cert_path }}/ca.crt"
          - src: "{{ icinga2_ssl_key }}"
            dest: "{{ icinga2_cert_path }}/{{ icinga2_cert_name }}.key"
          - src: "{{ icinga2_ssl_cert }}"
            dest: "{{ icinga2_cert_path }}/{{ icinga2_cert_name }}.crt"

    - name: pre generated certificates copy to icinga2 certs
      copy:
        remote_src: no
        src: "{{ _crt.src }}"
        dest: "{{ _crt.dest }}"
        owner: "{{ icinga2_user }}"
        group: "{{ icinga2_group }}"
      notify: reload icinga2 service
      loop: "{{ _tmp_crt }}"
      loop_control:
        loop_var: _crt
#  when: ( icinga2_ssl_cacert is defined and icinga2_ssl_cert is defined and icinga2_ssl_key is defined )
  when: icinga2_ssl_cacert is defined

- set_fact:
    args: None
